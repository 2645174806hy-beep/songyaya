
  create table "public"."books" (
    "id" bigint generated by default as identity not null,
    "invoice" character varying not null,
    "name" character varying,
    "price" double precision,
    "total" double precision
      );



  create table "public"."classify" (
    "id" bigint generated by default as identity not null,
    "number" character varying not null,
    "name" character varying,
    "describe" character varying
      );


CREATE UNIQUE INDEX books_pkey ON public.books USING btree (id);

CREATE UNIQUE INDEX classify_pkey ON public.classify USING btree (id);

alter table "public"."books" add constraint "books_pkey" PRIMARY KEY using index "books_pkey";

alter table "public"."classify" add constraint "classify_pkey" PRIMARY KEY using index "classify_pkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.handle_new_user()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
 SET search_path TO ''
AS $function$
begin
  insert into public.profiles (id, full_name, avatar_url)
  values (new.id, new.raw_user_meta_data->>'full_name', new.raw_user_meta_data->>'avatar_url');
  return new;
end;
$function$
;

grant delete on table "public"."books" to "anon";

grant insert on table "public"."books" to "anon";

grant references on table "public"."books" to "anon";

grant select on table "public"."books" to "anon";

grant trigger on table "public"."books" to "anon";

grant truncate on table "public"."books" to "anon";

grant update on table "public"."books" to "anon";

grant delete on table "public"."books" to "authenticated";

grant insert on table "public"."books" to "authenticated";

grant references on table "public"."books" to "authenticated";

grant select on table "public"."books" to "authenticated";

grant trigger on table "public"."books" to "authenticated";

grant truncate on table "public"."books" to "authenticated";

grant update on table "public"."books" to "authenticated";

grant delete on table "public"."books" to "service_role";

grant insert on table "public"."books" to "service_role";

grant references on table "public"."books" to "service_role";

grant select on table "public"."books" to "service_role";

grant trigger on table "public"."books" to "service_role";

grant truncate on table "public"."books" to "service_role";

grant update on table "public"."books" to "service_role";

grant delete on table "public"."classify" to "anon";

grant insert on table "public"."classify" to "anon";

grant references on table "public"."classify" to "anon";

grant select on table "public"."classify" to "anon";

grant trigger on table "public"."classify" to "anon";

grant truncate on table "public"."classify" to "anon";

grant update on table "public"."classify" to "anon";

grant delete on table "public"."classify" to "authenticated";

grant insert on table "public"."classify" to "authenticated";

grant references on table "public"."classify" to "authenticated";

grant select on table "public"."classify" to "authenticated";

grant trigger on table "public"."classify" to "authenticated";

grant truncate on table "public"."classify" to "authenticated";

grant update on table "public"."classify" to "authenticated";

grant delete on table "public"."classify" to "service_role";

grant insert on table "public"."classify" to "service_role";

grant references on table "public"."classify" to "service_role";

grant select on table "public"."classify" to "service_role";

grant trigger on table "public"."classify" to "service_role";

grant truncate on table "public"."classify" to "service_role";

grant update on table "public"."classify" to "service_role";

CREATE TRIGGER on_auth_user_created AFTER INSERT ON auth.users FOR EACH ROW EXECUTE FUNCTION handle_new_user();


  create policy "Anyone can upload an avatar."
  on "storage"."objects"
  as permissive
  for insert
  to public
with check ((bucket_id = 'avatars'::text));



  create policy "Avatar images are publicly accessible."
  on "storage"."objects"
  as permissive
  for select
  to public
using ((bucket_id = 'avatars'::text));



